using System.Diagnostics;

class Program
{
    static void Main(string[] args)
    {
        var CTS = new CancellationTokenSource();
        CTS.CancelAfter(5000);

        try
        {
            Stopwatch stopwatch = new Stopwatch();
            stopwatch.Start();

            var options = new ParallelOptions()
            {
                MaxDegreeOfParallelism = 2,
                CancellationToken = CTS.Token
            };

            Parallel.Invoke(
                options,
                () => DoSomeTask(1),
                () => DoSomeTask(2),
                () => DoSomeTask(3),
                () => DoSomeTask(4),
                () => DoSomeTask(5),
                () => DoSomeTask(6),
                () => DoSomeTask(7),
                () => DoSomeTask(8)
            );

            stopwatch.Stop();
            Console.WriteLine($"Time Taken: {stopwatch.ElapsedMilliseconds / 1000.0} seconds");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            CTS.Dispose();
        }
    }

    static void DoSomeTask(int n)
    {
        Console.WriteLine($"Task {n} started by Thread {Thread.CurrentThread.ManagedThreadId}");
        Thread.Sleep(2000);
        Console.WriteLine($"Task {n} completed by Thread {Thread.CurrentThread.ManagedThreadId}");
    }
}